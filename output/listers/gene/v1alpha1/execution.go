/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "testgen/input/gene/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExecutionLister helps list Executions.
type ExecutionLister interface {
	// List lists all Executions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Execution, err error)
	// Executions returns an object that can list and get Executions.
	Executions(namespace string) ExecutionNamespaceLister
	ExecutionListerExpansion
}

// executionLister implements the ExecutionLister interface.
type executionLister struct {
	indexer cache.Indexer
}

// NewExecutionLister returns a new ExecutionLister.
func NewExecutionLister(indexer cache.Indexer) ExecutionLister {
	return &executionLister{indexer: indexer}
}

// List lists all Executions in the indexer.
func (s *executionLister) List(selector labels.Selector) (ret []*v1alpha1.Execution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Execution))
	})
	return ret, err
}

// Executions returns an object that can list and get Executions.
func (s *executionLister) Executions(namespace string) ExecutionNamespaceLister {
	return executionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExecutionNamespaceLister helps list and get Executions.
type ExecutionNamespaceLister interface {
	// List lists all Executions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Execution, err error)
	// Get retrieves the Execution from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Execution, error)
	ExecutionNamespaceListerExpansion
}

// executionNamespaceLister implements the ExecutionNamespaceLister
// interface.
type executionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Executions in the indexer for a given namespace.
func (s executionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Execution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Execution))
	})
	return ret, err
}

// Get retrieves the Execution from the indexer for a given namespace and name.
func (s executionNamespaceLister) Get(name string) (*v1alpha1.Execution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("execution"), name)
	}
	return obj.(*v1alpha1.Execution), nil
}
